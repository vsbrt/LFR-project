
led1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000098  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000000ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 0000001b  00000000  00000000  0000010c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000001e3  00000000  00000000  00000127  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000e8  00000000  00000000  0000030a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001d5  00000000  00000000  000003f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000020  00000000  00000000  000005c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000bd  00000000  00000000  000005e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c8  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  0000076d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	19 c0       	rjmp	.+50     	; 0x36 <__bad_interrupt>
   4:	18 c0       	rjmp	.+48     	; 0x36 <__bad_interrupt>
   6:	17 c0       	rjmp	.+46     	; 0x36 <__bad_interrupt>
   8:	16 c0       	rjmp	.+44     	; 0x36 <__bad_interrupt>
   a:	15 c0       	rjmp	.+42     	; 0x36 <__bad_interrupt>
   c:	14 c0       	rjmp	.+40     	; 0x36 <__bad_interrupt>
   e:	13 c0       	rjmp	.+38     	; 0x36 <__bad_interrupt>
  10:	12 c0       	rjmp	.+36     	; 0x36 <__bad_interrupt>
  12:	11 c0       	rjmp	.+34     	; 0x36 <__bad_interrupt>
  14:	10 c0       	rjmp	.+32     	; 0x36 <__bad_interrupt>
  16:	0f c0       	rjmp	.+30     	; 0x36 <__bad_interrupt>
  18:	0e c0       	rjmp	.+28     	; 0x36 <__bad_interrupt>
  1a:	0d c0       	rjmp	.+26     	; 0x36 <__bad_interrupt>
  1c:	0c c0       	rjmp	.+24     	; 0x36 <__bad_interrupt>
  1e:	0b c0       	rjmp	.+22     	; 0x36 <__bad_interrupt>
  20:	0a c0       	rjmp	.+20     	; 0x36 <__bad_interrupt>
  22:	09 c0       	rjmp	.+18     	; 0x36 <__bad_interrupt>
  24:	08 c0       	rjmp	.+16     	; 0x36 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61
  32:	02 d0       	rcall	.+4      	; 0x38 <main>
  34:	2f c0       	rjmp	.+94     	; 0x94 <_exit>

00000036 <__bad_interrupt>:
  36:	e4 cf       	rjmp	.-56     	; 0x0 <__vectors>

00000038 <main>:
#include<avr/io.h>
#include<util/delay.h>

int main()
{
  38:	ff 92       	push	r15
  3a:	0f 93       	push	r16
  3c:	1f 93       	push	r17

DDRB = 0xff;
  3e:	8f ef       	ldi	r24, 0xFF	; 255
  40:	87 bb       	out	0x17, r24	; 23

while(1)
{
PORTB = 0b00001111;
  42:	8f e0       	ldi	r24, 0x0F	; 15
  44:	f8 2e       	mov	r15, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  46:	64 ec       	ldi	r22, 0xC4	; 196
  48:	79 e0       	ldi	r23, 0x09	; 9
_delay_ms(10);
PORTB = 0b0001110;
  4a:	0e e0       	ldi	r16, 0x0E	; 14
  4c:	48 ea       	ldi	r20, 0xA8	; 168
  4e:	51 e6       	ldi	r21, 0x61	; 97
_delay_ms(100);

PORTB = 0b0001101;
  50:	1d e0       	ldi	r17, 0x0D	; 13
_delay_ms(100);

PORTB = 0b0001011;
  52:	bb e0       	ldi	r27, 0x0B	; 11
  54:	29 e1       	ldi	r18, 0x19	; 25
  56:	30 e0       	ldi	r19, 0x00	; 0
_delay_ms(1000);

PORTB = 0b0000111;
  58:	a7 e0       	ldi	r26, 0x07	; 7

DDRB = 0xff;

while(1)
{
PORTB = 0b00001111;
  5a:	f8 ba       	out	0x18, r15	; 24
  5c:	cb 01       	movw	r24, r22
  5e:	01 97       	sbiw	r24, 0x01	; 1
  60:	f1 f7       	brne	.-4      	; 0x5e <__SREG__+0x1f>
_delay_ms(10);
PORTB = 0b0001110;
  62:	08 bb       	out	0x18, r16	; 24
  64:	ca 01       	movw	r24, r20
  66:	01 97       	sbiw	r24, 0x01	; 1
  68:	f1 f7       	brne	.-4      	; 0x66 <__SREG__+0x27>
_delay_ms(100);

PORTB = 0b0001101;
  6a:	18 bb       	out	0x18, r17	; 24
  6c:	ca 01       	movw	r24, r20
  6e:	01 97       	sbiw	r24, 0x01	; 1
  70:	f1 f7       	brne	.-4      	; 0x6e <__SREG__+0x2f>
_delay_ms(100);

PORTB = 0b0001011;
  72:	b8 bb       	out	0x18, r27	; 24
  74:	80 e1       	ldi	r24, 0x10	; 16
  76:	97 e2       	ldi	r25, 0x27	; 39
  78:	f9 01       	movw	r30, r18
  7a:	31 97       	sbiw	r30, 0x01	; 1
  7c:	f1 f7       	brne	.-4      	; 0x7a <__SREG__+0x3b>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  7e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  80:	d9 f7       	brne	.-10     	; 0x78 <__SREG__+0x39>
_delay_ms(1000);

PORTB = 0b0000111;
  82:	a8 bb       	out	0x18, r26	; 24
  84:	80 e1       	ldi	r24, 0x10	; 16
  86:	97 e2       	ldi	r25, 0x27	; 39
  88:	f9 01       	movw	r30, r18
  8a:	31 97       	sbiw	r30, 0x01	; 1
  8c:	f1 f7       	brne	.-4      	; 0x8a <__SREG__+0x4b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  8e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  90:	d9 f7       	brne	.-10     	; 0x88 <__SREG__+0x49>
  92:	e3 cf       	rjmp	.-58     	; 0x5a <__SREG__+0x1b>

00000094 <_exit>:
  94:	f8 94       	cli

00000096 <__stop_program>:
  96:	ff cf       	rjmp	.-2      	; 0x96 <__stop_program>
