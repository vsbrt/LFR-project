
LcdALARM.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000053c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  0000053c  000005d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080006c  0080006c  000005dc  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000ee  00000000  00000000  000005fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000804  00000000  00000000  000006ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018d  00000000  00000000  00000eee  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000007c8  00000000  00000000  0000107b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00001844  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000177  00000000  00000000  00001924  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000450  00000000  00000000  00001a9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000090  00000000  00000000  00001eeb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	2c c0       	rjmp	.+88     	; 0x5c <__bad_interrupt>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	24 c0       	rjmp	.+72     	; 0x5c <__bad_interrupt>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	ec e3       	ldi	r30, 0x3C	; 60
  3a:	f5 e0       	ldi	r31, 0x05	; 5
  3c:	02 c0       	rjmp	.+4      	; 0x42 <.do_copy_data_start>

0000003e <.do_copy_data_loop>:
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0

00000042 <.do_copy_data_start>:
  42:	ac 36       	cpi	r26, 0x6C	; 108
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <.do_copy_data_loop>

00000048 <__do_clear_bss>:
  48:	10 e0       	ldi	r17, 0x00	; 0
  4a:	ac e6       	ldi	r26, 0x6C	; 108
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a0 37       	cpi	r26, 0x70	; 112
  54:	b1 07       	cpc	r27, r17
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	f2 d1       	rcall	.+996    	; 0x43e <main>
  5a:	6e c2       	rjmp	.+1244   	; 0x538 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <lcd_com>:

//LCD command line
 void lcd_com(char val2)
 {
 //int port=0;
  	_SFR_IO8(0x12+port)=val2;
  5e:	e0 91 6e 00 	lds	r30, 0x006E
  62:	f0 91 6f 00 	lds	r31, 0x006F
  66:	82 ab       	std	Z+50, r24	; 0x32
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  68:	84 ec       	ldi	r24, 0xC4	; 196
  6a:	99 e0       	ldi	r25, 0x09	; 9
  6c:	01 97       	sbiw	r24, 0x01	; 1
  6e:	f1 f7       	brne	.-4      	; 0x6c <lcd_com+0xe>
	_delay_ms(10);
  	_SFR_IO8(0x12+port) &=~(1<<rs);
  70:	e0 91 6e 00 	lds	r30, 0x006E
  74:	f0 91 6f 00 	lds	r31, 0x006F
  78:	82 a9       	ldd	r24, Z+50	; 0x32
  7a:	8e 7f       	andi	r24, 0xFE	; 254
  7c:	82 ab       	std	Z+50, r24	; 0x32
  7e:	2a ef       	ldi	r18, 0xFA	; 250
  80:	30 e0       	ldi	r19, 0x00	; 0
  82:	c9 01       	movw	r24, r18
  84:	01 97       	sbiw	r24, 0x01	; 1
  86:	f1 f7       	brne	.-4      	; 0x84 <lcd_com+0x26>
	_delay_ms(1);
    _SFR_IO8(0x12+port)&=~(1<<rw);
  88:	e0 91 6e 00 	lds	r30, 0x006E
  8c:	f0 91 6f 00 	lds	r31, 0x006F
  90:	82 a9       	ldd	r24, Z+50	; 0x32
  92:	8d 7f       	andi	r24, 0xFD	; 253
  94:	82 ab       	std	Z+50, r24	; 0x32
  96:	c9 01       	movw	r24, r18
  98:	01 97       	sbiw	r24, 0x01	; 1
  9a:	f1 f7       	brne	.-4      	; 0x98 <lcd_com+0x3a>
	_delay_ms(1);
    _SFR_IO8(0x12+port)|=(1<<en);
  9c:	e0 91 6e 00 	lds	r30, 0x006E
  a0:	f0 91 6f 00 	lds	r31, 0x006F
  a4:	82 a9       	ldd	r24, Z+50	; 0x32
  a6:	84 60       	ori	r24, 0x04	; 4
  a8:	82 ab       	std	Z+50, r24	; 0x32
  aa:	c9 01       	movw	r24, r18
  ac:	01 97       	sbiw	r24, 0x01	; 1
  ae:	f1 f7       	brne	.-4      	; 0xac <lcd_com+0x4e>
    _delay_ms(1);
    _SFR_IO8(0x12+port)&=~(1<<en);
  b0:	e0 91 6e 00 	lds	r30, 0x006E
  b4:	f0 91 6f 00 	lds	r31, 0x006F
  b8:	82 a9       	ldd	r24, Z+50	; 0x32
  ba:	8b 7f       	andi	r24, 0xFB	; 251
  bc:	82 ab       	std	Z+50, r24	; 0x32
 }
  be:	08 95       	ret

000000c0 <lcd_printcom>:
 }


//LCD 8bit to 4 bit mode for command
void lcd_printcom(char val)
{
  c0:	1f 93       	push	r17
  c2:	18 2f       	mov	r17, r24
   char div;
    
    div = val & 0xF0;        //mask lower nibble because PA4-PA7 pins are used. 
    lcd_com(div);            // send to LCD
  c4:	80 7f       	andi	r24, 0xF0	; 240
  c6:	cb df       	rcall	.-106    	; 0x5e <lcd_com>
 
    div = ((val<<4) & 0xF0);    //shift 4-bit and mask
    lcd_com(div);    
  c8:	81 2f       	mov	r24, r17
  ca:	82 95       	swap	r24
  cc:	80 7f       	andi	r24, 0xF0	; 240
  ce:	c7 df       	rcall	.-114    	; 0x5e <lcd_com>

}
  d0:	1f 91       	pop	r17
  d2:	08 95       	ret

000000d4 <lcd_data>:

 //LCD DATA line
 void lcd_data(char val3)
 {
    //int port=0;
    _SFR_IO8(0x12+port)=val3;
  d4:	e0 91 6e 00 	lds	r30, 0x006E
  d8:	f0 91 6f 00 	lds	r31, 0x006F
  dc:	82 ab       	std	Z+50, r24	; 0x32
  de:	2a ef       	ldi	r18, 0xFA	; 250
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	c9 01       	movw	r24, r18
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <lcd_data+0x10>
	_delay_ms(1);
    _SFR_IO8(0x12+port)|=(1<<rs);
  e8:	e0 91 6e 00 	lds	r30, 0x006E
  ec:	f0 91 6f 00 	lds	r31, 0x006F
  f0:	82 a9       	ldd	r24, Z+50	; 0x32
  f2:	81 60       	ori	r24, 0x01	; 1
  f4:	82 ab       	std	Z+50, r24	; 0x32
  f6:	c9 01       	movw	r24, r18
  f8:	01 97       	sbiw	r24, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <lcd_data+0x24>
    _delay_ms(1);
	_SFR_IO8(0x12+port)&=~(1<<rw);
  fc:	e0 91 6e 00 	lds	r30, 0x006E
 100:	f0 91 6f 00 	lds	r31, 0x006F
 104:	82 a9       	ldd	r24, Z+50	; 0x32
 106:	8d 7f       	andi	r24, 0xFD	; 253
 108:	82 ab       	std	Z+50, r24	; 0x32
 10a:	c9 01       	movw	r24, r18
 10c:	01 97       	sbiw	r24, 0x01	; 1
 10e:	f1 f7       	brne	.-4      	; 0x10c <lcd_data+0x38>
    _delay_ms(1);
	_SFR_IO8(0x12+port)|=(1<<en);
 110:	e0 91 6e 00 	lds	r30, 0x006E
 114:	f0 91 6f 00 	lds	r31, 0x006F
 118:	82 a9       	ldd	r24, Z+50	; 0x32
 11a:	84 60       	ori	r24, 0x04	; 4
 11c:	82 ab       	std	Z+50, r24	; 0x32
 11e:	c9 01       	movw	r24, r18
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <lcd_data+0x4c>
    _delay_ms(1);
    _SFR_IO8(0x12+port)&=~(1<<en);
 124:	e0 91 6e 00 	lds	r30, 0x006E
 128:	f0 91 6f 00 	lds	r31, 0x006F
 12c:	82 a9       	ldd	r24, Z+50	; 0x32
 12e:	8b 7f       	andi	r24, 0xFB	; 251
 130:	82 ab       	std	Z+50, r24	; 0x32


 }
 132:	08 95       	ret

00000134 <lcd_printchar>:
    lcd_com(div);    

}
//LCD 8bit to 4 bit mode for data
void lcd_printchar(char val1)
{
 134:	1f 93       	push	r17
 136:	18 2f       	mov	r17, r24
   char div1;
    div1 = val1 & 0xF0;        //mask lower nibble because PA4-PA7 pins are used. 
    lcd_data(div1);            // send to LCD
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	cc df       	rcall	.-104    	; 0xd4 <lcd_data>
 
    div1 = ((val1<<4) & 0xF0);    //shift 4-bit and mask
    lcd_data(div1);    
 13c:	81 2f       	mov	r24, r17
 13e:	82 95       	swap	r24
 140:	80 7f       	andi	r24, 0xF0	; 240
 142:	c8 df       	rcall	.-112    	; 0xd4 <lcd_data>
    
}
 144:	1f 91       	pop	r17
 146:	08 95       	ret

00000148 <lcd_gotoxy>:

 }

//LCD cursor possition
 void lcd_gotoxy(int x,int y)
 {
 148:	cf 93       	push	r28
 14a:	df 93       	push	r29
 14c:	ec 01       	movw	r28, r24
    pos=15-x;
 14e:	8f e0       	ldi	r24, 0x0F	; 15
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	8c 1b       	sub	r24, r28
 154:	9d 0b       	sbc	r25, r29
 156:	90 93 6d 00 	sts	0x006D, r25
 15a:	80 93 6c 00 	sts	0x006C, r24

    int xk=0x80,yk=0xC0;    
    if(y==1)
 15e:	61 30       	cpi	r22, 0x01	; 1
 160:	71 05       	cpc	r23, r1
 162:	29 f4       	brne	.+10     	; 0x16e <lcd_gotoxy+0x26>
    {
    lcd_printcom(0xC0);
 164:	80 ec       	ldi	r24, 0xC0	; 192
 166:	ac df       	rcall	.-168    	; 0xc0 <lcd_printcom>
    yk = x | 0xC0;
    lcd_printcom(yk);
 168:	9e 01       	movw	r18, r28
 16a:	20 6c       	ori	r18, 0xC0	; 192
 16c:	02 c0       	rjmp	.+4      	; 0x172 <lcd_gotoxy+0x2a>
      }
    else
    {
    xk = x | 0x80;
    lcd_printcom(xk);
 16e:	9e 01       	movw	r18, r28
 170:	20 68       	ori	r18, 0x80	; 128
 172:	82 2f       	mov	r24, r18
 174:	a5 df       	rcall	.-182    	; 0xc0 <lcd_printcom>
    }
 } 
 176:	df 91       	pop	r29
 178:	cf 91       	pop	r28
 17a:	08 95       	ret

0000017c <lcd_printstr>:

 //LCD print
 void lcd_printstr(char *data0)
 {
 17c:	0f 93       	push	r16
 17e:	1f 93       	push	r17
 180:	cf 93       	push	r28
 182:	df 93       	push	r29
 184:	8c 01       	movw	r16, r24
 186:	c0 e0       	ldi	r28, 0x00	; 0
 188:	d0 e0       	ldi	r29, 0x00	; 0
 18a:	16 c0       	rjmp	.+44     	; 0x1b8 <lcd_printstr+0x3c>
     int i=0;

     
     while(data0[i]!='\0')
        {
       if(i<16)
 18c:	c0 31       	cpi	r28, 0x10	; 16
 18e:	d1 05       	cpc	r29, r1
 190:	0c f4       	brge	.+2      	; 0x194 <lcd_printstr+0x18>
        {
        lcd_printchar(data0[i]);
 192:	d0 df       	rcall	.-96     	; 0x134 <lcd_printchar>
       }

     if(i == pos)
 194:	80 91 6c 00 	lds	r24, 0x006C
 198:	90 91 6d 00 	lds	r25, 0x006D
 19c:	c8 17       	cp	r28, r24
 19e:	d9 07       	cpc	r29, r25
 1a0:	11 f4       	brne	.+4      	; 0x1a6 <lcd_printstr+0x2a>
        {
        lcd_printcom(0xC0);
 1a2:	80 ec       	ldi	r24, 0xC0	; 192
 1a4:	8d df       	rcall	.-230    	; 0xc0 <lcd_printcom>
        }

        if(i>15)
 1a6:	c0 31       	cpi	r28, 0x10	; 16
 1a8:	d1 05       	cpc	r29, r1
 1aa:	1c f0       	brlt	.+6      	; 0x1b2 <lcd_printstr+0x36>
        {
        lcd_printchar(data0[i]);
 1ac:	f8 01       	movw	r30, r16
 1ae:	80 81       	ld	r24, Z
 1b0:	c1 df       	rcall	.-126    	; 0x134 <lcd_printchar>
       }
        i++;
 1b2:	21 96       	adiw	r28, 0x01	; 1
 1b4:	0f 5f       	subi	r16, 0xFF	; 255
 1b6:	1f 4f       	sbci	r17, 0xFF	; 255
 void lcd_printstr(char *data0)
 {
     int i=0;

     
     while(data0[i]!='\0')
 1b8:	f8 01       	movw	r30, r16
 1ba:	80 81       	ld	r24, Z
 1bc:	88 23       	and	r24, r24
 1be:	31 f7       	brne	.-52     	; 0x18c <lcd_printstr+0x10>
        lcd_printchar(data0[i]);
       }
        i++;
        }

 }
 1c0:	df 91       	pop	r29
 1c2:	cf 91       	pop	r28
 1c4:	1f 91       	pop	r17
 1c6:	0f 91       	pop	r16
 1c8:	08 95       	ret

000001ca <lcd_printnum>:

//////////////////////LCD number/////////////////////////////////////////////////////
void lcd_printnum(long int val)
{    
 1ca:	cf 92       	push	r12
 1cc:	df 92       	push	r13
 1ce:	ef 92       	push	r14
 1d0:	ff 92       	push	r15
 1d2:	1f 93       	push	r17
 1d4:	6b 01       	movw	r12, r22
 1d6:	7c 01       	movw	r14, r24
    char str;
    if(val==0)
 1d8:	61 15       	cp	r22, r1
 1da:	71 05       	cpc	r23, r1
 1dc:	81 05       	cpc	r24, r1
 1de:	91 05       	cpc	r25, r1
 1e0:	e9 f4       	brne	.+58     	; 0x21c <lcd_printnum+0x52>
    lcd_printchar(48);
 1e2:	80 e3       	ldi	r24, 0x30	; 48
 1e4:	a7 df       	rcall	.-178    	; 0x134 <lcd_printchar>
 1e6:	1a c0       	rjmp	.+52     	; 0x21c <lcd_printnum+0x52>
    while(val)
    {
    str=val%10;
 1e8:	c7 01       	movw	r24, r14
 1ea:	b6 01       	movw	r22, r12
 1ec:	2a e0       	ldi	r18, 0x0A	; 10
 1ee:	30 e0       	ldi	r19, 0x00	; 0
 1f0:	40 e0       	ldi	r20, 0x00	; 0
 1f2:	50 e0       	ldi	r21, 0x00	; 0
 1f4:	64 d1       	rcall	.+712    	; 0x4be <__divmodsi4>
 1f6:	16 2f       	mov	r17, r22
    val=val/10;
 1f8:	c7 01       	movw	r24, r14
 1fa:	b6 01       	movw	r22, r12
 1fc:	2a e0       	ldi	r18, 0x0A	; 10
 1fe:	30 e0       	ldi	r19, 0x00	; 0
 200:	40 e0       	ldi	r20, 0x00	; 0
 202:	50 e0       	ldi	r21, 0x00	; 0
 204:	5c d1       	rcall	.+696    	; 0x4be <__divmodsi4>
 206:	c9 01       	movw	r24, r18
 208:	da 01       	movw	r26, r20
 20a:	6c 01       	movw	r12, r24
 20c:	7d 01       	movw	r14, r26
   lcd_printcom(0x04);
 20e:	84 e0       	ldi	r24, 0x04	; 4
 210:	57 df       	rcall	.-338    	; 0xc0 <lcd_printcom>
     lcd_printchar(48+str);
 212:	81 2f       	mov	r24, r17
 214:	80 5d       	subi	r24, 0xD0	; 208
 216:	8e df       	rcall	.-228    	; 0x134 <lcd_printchar>
    lcd_printcom(0x06);
 218:	86 e0       	ldi	r24, 0x06	; 6
 21a:	52 df       	rcall	.-348    	; 0xc0 <lcd_printcom>
void lcd_printnum(long int val)
{    
    char str;
    if(val==0)
    lcd_printchar(48);
    while(val)
 21c:	c1 14       	cp	r12, r1
 21e:	d1 04       	cpc	r13, r1
 220:	e1 04       	cpc	r14, r1
 222:	f1 04       	cpc	r15, r1
 224:	09 f7       	brne	.-62     	; 0x1e8 <lcd_printnum+0x1e>
   lcd_printcom(0x04);
     lcd_printchar(48+str);
    lcd_printcom(0x06);
    }

}
 226:	1f 91       	pop	r17
 228:	ff 90       	pop	r15
 22a:	ef 90       	pop	r14
 22c:	df 90       	pop	r13
 22e:	cf 90       	pop	r12
 230:	08 95       	ret

00000232 <lcd_clear>:
//LCD clear

void lcd_clear()
    {

    lcd_printcom(0x01);
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	45 df       	rcall	.-374    	; 0xc0 <lcd_printcom>
 236:	88 eb       	ldi	r24, 0xB8	; 184
 238:	9b e0       	ldi	r25, 0x0B	; 11
 23a:	29 e1       	ldi	r18, 0x19	; 25
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	f9 01       	movw	r30, r18
 240:	31 97       	sbiw	r30, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <lcd_clear+0xe>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 244:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 246:	d9 f7       	brne	.-10     	; 0x23e <lcd_clear+0xc>
    _delay_ms(300);
    }
 248:	08 95       	ret

0000024a <lcd_userdefine>:
//animation
void lcd_userdefine()
{
 24a:	0f 93       	push	r16
 24c:	1f 93       	push	r17
 lcd_printcom(0x40);
 24e:	80 e4       	ldi	r24, 0x40	; 64
 250:	37 df       	rcall	.-402    	; 0xc0 <lcd_printcom>
 252:	08 ea       	ldi	r16, 0xA8	; 168
 254:	11 e6       	ldi	r17, 0x61	; 97
 256:	c8 01       	movw	r24, r16
 258:	01 97       	sbiw	r24, 0x01	; 1
 25a:	f1 f7       	brne	.-4      	; 0x258 <lcd_userdefine+0xe>
_delay_ms(100);
 lcd_printchar(0b00000000);
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	6a df       	rcall	.-300    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000000);
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	68 df       	rcall	.-304    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000001);
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	66 df       	rcall	.-308    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000011);
 268:	83 e0       	ldi	r24, 0x03	; 3
 26a:	64 df       	rcall	.-312    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000111);
 26c:	87 e0       	ldi	r24, 0x07	; 7
 26e:	62 df       	rcall	.-316    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001111);
 270:	8f e0       	ldi	r24, 0x0F	; 15
 272:	60 df       	rcall	.-320    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 274:	8f e1       	ldi	r24, 0x1F	; 31
 276:	5e df       	rcall	.-324    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000000);
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	5c df       	rcall	.-328    	; 0x134 <lcd_printchar>
 lcd_printcom(0x48);
 27c:	88 e4       	ldi	r24, 0x48	; 72
 27e:	20 df       	rcall	.-448    	; 0xc0 <lcd_printcom>
 280:	c8 01       	movw	r24, r16
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <lcd_userdefine+0x38>
_delay_ms(100);
 lcd_printchar(0b00000000);
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	55 df       	rcall	.-342    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000100);
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	53 df       	rcall	.-346    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001110);
 28e:	8e e0       	ldi	r24, 0x0E	; 14
 290:	51 df       	rcall	.-350    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001110);
 292:	8e e0       	ldi	r24, 0x0E	; 14
 294:	4f df       	rcall	.-354    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 296:	8f e1       	ldi	r24, 0x1F	; 31
 298:	4d df       	rcall	.-358    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	4b df       	rcall	.-362    	; 0x134 <lcd_printchar>
 lcd_printchar(0b000001000);
 29e:	88 e0       	ldi	r24, 0x08	; 8
 2a0:	49 df       	rcall	.-366    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000000);
 2a2:	80 e0       	ldi	r24, 0x00	; 0
 2a4:	47 df       	rcall	.-370    	; 0x134 <lcd_printchar>
 lcd_printcom(0x50);
 2a6:	80 e5       	ldi	r24, 0x50	; 80
 2a8:	0b df       	rcall	.-490    	; 0xc0 <lcd_printcom>
 2aa:	c8 01       	movw	r24, r16
 2ac:	01 97       	sbiw	r24, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <lcd_userdefine+0x62>
_delay_ms(100);
 lcd_printchar(0b00000000);
 2b0:	80 e0       	ldi	r24, 0x00	; 0
 2b2:	40 df       	rcall	.-384    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000100);
 2b4:	84 e0       	ldi	r24, 0x04	; 4
 2b6:	3e df       	rcall	.-388    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001110);
 2b8:	8e e0       	ldi	r24, 0x0E	; 14
 2ba:	3c df       	rcall	.-392    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001110);
 2bc:	8e e0       	ldi	r24, 0x0E	; 14
 2be:	3a df       	rcall	.-396    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 2c0:	8f e1       	ldi	r24, 0x1F	; 31
 2c2:	38 df       	rcall	.-400    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 2c4:	8f e1       	ldi	r24, 0x1F	; 31
 2c6:	36 df       	rcall	.-404    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000001);
 2c8:	81 e0       	ldi	r24, 0x01	; 1
 2ca:	34 df       	rcall	.-408    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000000);
 2cc:	80 e0       	ldi	r24, 0x00	; 0
 2ce:	32 df       	rcall	.-412    	; 0x134 <lcd_printchar>
 lcd_printcom(0x58);
 2d0:	88 e5       	ldi	r24, 0x58	; 88
 2d2:	f6 de       	rcall	.-532    	; 0xc0 <lcd_printcom>
 2d4:	c8 01       	movw	r24, r16
 2d6:	01 97       	sbiw	r24, 0x01	; 1
 2d8:	f1 f7       	brne	.-4      	; 0x2d6 <lcd_userdefine+0x8c>
_delay_ms(100);
 lcd_printchar(0b00000000);
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	2b df       	rcall	.-426    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000100);
 2de:	84 e0       	ldi	r24, 0x04	; 4
 2e0:	29 df       	rcall	.-430    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001110);
 2e2:	8e e0       	ldi	r24, 0x0E	; 14
 2e4:	27 df       	rcall	.-434    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001110);
 2e6:	8e e0       	ldi	r24, 0x0E	; 14
 2e8:	25 df       	rcall	.-438    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 2ea:	8f e1       	ldi	r24, 0x1F	; 31
 2ec:	23 df       	rcall	.-442    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 2ee:	8f e1       	ldi	r24, 0x1F	; 31
 2f0:	21 df       	rcall	.-446    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00010000);
 2f2:	80 e1       	ldi	r24, 0x10	; 16
 2f4:	1f df       	rcall	.-450    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000000);
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	1d df       	rcall	.-454    	; 0x134 <lcd_printchar>
 lcd_printcom(0x60);
 2fa:	80 e6       	ldi	r24, 0x60	; 96
 2fc:	e1 de       	rcall	.-574    	; 0xc0 <lcd_printcom>
 2fe:	c8 01       	movw	r24, r16
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <lcd_userdefine+0xb6>
_delay_ms(100);
 lcd_printchar(0b00000100);
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	16 df       	rcall	.-468    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001110);
 308:	8e e0       	ldi	r24, 0x0E	; 14
 30a:	14 df       	rcall	.-472    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 30c:	8f e1       	ldi	r24, 0x1F	; 31
 30e:	12 df       	rcall	.-476    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00010001);
 310:	81 e1       	ldi	r24, 0x11	; 17
 312:	10 df       	rcall	.-480    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00010001);
 314:	81 e1       	ldi	r24, 0x11	; 17
 316:	0e df       	rcall	.-484    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 318:	8f e1       	ldi	r24, 0x1F	; 31
 31a:	0c df       	rcall	.-488    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 31c:	8f e1       	ldi	r24, 0x1F	; 31
 31e:	0a df       	rcall	.-492    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00011111);
 320:	8f e1       	ldi	r24, 0x1F	; 31
 322:	08 df       	rcall	.-496    	; 0x134 <lcd_printchar>
 lcd_printcom(0x68);
 324:	88 e6       	ldi	r24, 0x68	; 104
 326:	cc de       	rcall	.-616    	; 0xc0 <lcd_printcom>
 328:	c8 01       	movw	r24, r16
 32a:	01 97       	sbiw	r24, 0x01	; 1
 32c:	f1 f7       	brne	.-4      	; 0x32a <lcd_userdefine+0xe0>
_delay_ms(100);
 lcd_printchar(0b00000001);
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	01 df       	rcall	.-510    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00000001);
 332:	81 e0       	ldi	r24, 0x01	; 1
 334:	ff de       	rcall	.-514    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001111);
 336:	8f e0       	ldi	r24, 0x0F	; 15
 338:	fd de       	rcall	.-518    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001111);
 33a:	8f e0       	ldi	r24, 0x0F	; 15
 33c:	fb de       	rcall	.-522    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001111);
 33e:	8f e0       	ldi	r24, 0x0F	; 15
 340:	f9 de       	rcall	.-526    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001111);
 342:	8f e0       	ldi	r24, 0x0F	; 15
 344:	f7 de       	rcall	.-530    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001111);
 346:	8f e0       	ldi	r24, 0x0F	; 15
 348:	f5 de       	rcall	.-534    	; 0x134 <lcd_printchar>
 lcd_printchar(0b00001111);
 34a:	8f e0       	ldi	r24, 0x0F	; 15
 34c:	f3 de       	rcall	.-538    	; 0x134 <lcd_printchar>
 }
 34e:	1f 91       	pop	r17
 350:	0f 91       	pop	r16
 352:	08 95       	ret

00000354 <lcd_init>:
//Function declaration
int port;
//LCD init
 void lcd_init(char p)
 {
    if(p=='D')port=0;
 354:	84 34       	cpi	r24, 0x44	; 68
 356:	29 f4       	brne	.+10     	; 0x362 <lcd_init+0xe>
 358:	10 92 6f 00 	sts	0x006F, r1
 35c:	10 92 6e 00 	sts	0x006E, r1
 360:	12 c0       	rjmp	.+36     	; 0x386 <lcd_init+0x32>
	if(p=='C')port=3;
 362:	83 34       	cpi	r24, 0x43	; 67
 364:	19 f4       	brne	.+6      	; 0x36c <lcd_init+0x18>
 366:	83 e0       	ldi	r24, 0x03	; 3
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	09 c0       	rjmp	.+18     	; 0x37e <lcd_init+0x2a>
	if(p=='B')port=6;
 36c:	82 34       	cpi	r24, 0x42	; 66
 36e:	19 f4       	brne	.+6      	; 0x376 <lcd_init+0x22>
 370:	86 e0       	ldi	r24, 0x06	; 6
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	04 c0       	rjmp	.+8      	; 0x37e <lcd_init+0x2a>
	if(p=='A')port=9;
 376:	81 34       	cpi	r24, 0x41	; 65
 378:	31 f4       	brne	.+12     	; 0x386 <lcd_init+0x32>
 37a:	89 e0       	ldi	r24, 0x09	; 9
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	90 93 6f 00 	sts	0x006F, r25
 382:	80 93 6e 00 	sts	0x006E, r24
	_SFR_IO8(0x11+port)=0xFF;
 386:	e0 91 6e 00 	lds	r30, 0x006E
 38a:	f0 91 6f 00 	lds	r31, 0x006F
 38e:	8f ef       	ldi	r24, 0xFF	; 255
 390:	81 ab       	std	Z+49, r24	; 0x31
 392:	88 ea       	ldi	r24, 0xA8	; 168
 394:	91 e6       	ldi	r25, 0x61	; 97
 396:	01 97       	sbiw	r24, 0x01	; 1
 398:	f1 f7       	brne	.-4      	; 0x396 <lcd_init+0x42>
	_delay_ms(100);
	lcd_printcom(0x01);        //clear LCD
 39a:	81 e0       	ldi	r24, 0x01	; 1
 39c:	91 de       	rcall	.-734    	; 0xc0 <lcd_printcom>
 39e:	80 e5       	ldi	r24, 0x50	; 80
 3a0:	93 ec       	ldi	r25, 0xC3	; 195
 3a2:	01 97       	sbiw	r24, 0x01	; 1
 3a4:	f1 f7       	brne	.-4      	; 0x3a2 <lcd_init+0x4e>
    	_delay_ms(200);   
    	lcd_printcom(0x02);        //cursor in home position and Returns display to its original state if shifted
 3a6:	82 e0       	ldi	r24, 0x02	; 2
 3a8:	8b de       	rcall	.-746    	; 0xc0 <lcd_printcom>
    
    	lcd_printcom(0x28);        //selecting data is writen in CGRAM or DDRAM
 3aa:	88 e2       	ldi	r24, 0x28	; 40
 3ac:	89 de       	rcall	.-750    	; 0xc0 <lcd_printcom>
 3ae:	88 e8       	ldi	r24, 0x88	; 136
 3b0:	93 e1       	ldi	r25, 0x13	; 19
 3b2:	01 97       	sbiw	r24, 0x01	; 1
 3b4:	f1 f7       	brne	.-4      	; 0x3b2 <lcd_init+0x5e>
     	_delay_ms(20);   
	

   	lcd_printcom(0x06); 	//Sets mode to increment the
 3b6:	86 e0       	ldi	r24, 0x06	; 6
 3b8:	83 de       	rcall	.-762    	; 0xc0 <lcd_printcom>
                            	          		//address by one and to shift the
                            			//cursor to the right at the time of
                            			//write to the DD/CGRAM.
                            			//Display is not shifted.
    
    	lcd_printcom(0x0C);        //Turns on display and cursor off.
 3ba:	8c e0       	ldi	r24, 0x0C	; 12
 3bc:	81 de       	rcall	.-766    	; 0xc0 <lcd_printcom>
    	lcd_userdefine();     
 3be:	45 df       	rcall	.-374    	; 0x24a <lcd_userdefine>
    
 }
 3c0:	08 95       	ret

000003c2 <lcd_printpattern>:
 lcd_printchar(0b00001111);
 lcd_printchar(0b00001111);
 }
//custom pattern
void lcd_printpattern(int x)
{
 3c2:	cf 93       	push	r28
 3c4:	df 93       	push	r29
 3c6:	ec 01       	movw	r28, r24
if(x==1)
 3c8:	81 30       	cpi	r24, 0x01	; 1
 3ca:	91 05       	cpc	r25, r1
 3cc:	19 f4       	brne	.+6      	; 0x3d4 <lcd_printpattern+0x12>
 lcd_printchar(0);
 3ce:	80 e0       	ldi	r24, 0x00	; 0
 3d0:	b1 de       	rcall	.-670    	; 0x134 <lcd_printchar>
 3d2:	11 c0       	rjmp	.+34     	; 0x3f6 <lcd_printpattern+0x34>
if(x==2)
 3d4:	82 30       	cpi	r24, 0x02	; 2
 3d6:	91 05       	cpc	r25, r1
 3d8:	19 f4       	brne	.+6      	; 0x3e0 <lcd_printpattern+0x1e>
 lcd_printchar(1);
 3da:	81 e0       	ldi	r24, 0x01	; 1
 3dc:	ab de       	rcall	.-682    	; 0x134 <lcd_printchar>
 3de:	10 c0       	rjmp	.+32     	; 0x400 <lcd_printpattern+0x3e>
if(x==3)
 3e0:	83 30       	cpi	r24, 0x03	; 3
 3e2:	91 05       	cpc	r25, r1
 3e4:	19 f4       	brne	.+6      	; 0x3ec <lcd_printpattern+0x2a>
 lcd_printchar(2);
 3e6:	82 e0       	ldi	r24, 0x02	; 2
 3e8:	a5 de       	rcall	.-694    	; 0x134 <lcd_printchar>
 3ea:	0f c0       	rjmp	.+30     	; 0x40a <lcd_printpattern+0x48>
if(x==4)
 3ec:	84 30       	cpi	r24, 0x04	; 4
 3ee:	91 05       	cpc	r25, r1
 3f0:	11 f4       	brne	.+4      	; 0x3f6 <lcd_printpattern+0x34>
 lcd_printchar(3);
 3f2:	83 e0       	ldi	r24, 0x03	; 3
 3f4:	0d c0       	rjmp	.+26     	; 0x410 <lcd_printpattern+0x4e>
if(x==5)
 3f6:	c5 30       	cpi	r28, 0x05	; 5
 3f8:	d1 05       	cpc	r29, r1
 3fa:	11 f4       	brne	.+4      	; 0x400 <lcd_printpattern+0x3e>
 lcd_printchar(4);
 3fc:	84 e0       	ldi	r24, 0x04	; 4
 3fe:	08 c0       	rjmp	.+16     	; 0x410 <lcd_printpattern+0x4e>
if(x==6)
 400:	c6 30       	cpi	r28, 0x06	; 6
 402:	d1 05       	cpc	r29, r1
 404:	11 f4       	brne	.+4      	; 0x40a <lcd_printpattern+0x48>
 lcd_printchar(5);
 406:	85 e0       	ldi	r24, 0x05	; 5
 408:	03 c0       	rjmp	.+6      	; 0x410 <lcd_printpattern+0x4e>
if(x==7)
 40a:	27 97       	sbiw	r28, 0x07	; 7
 40c:	11 f4       	brne	.+4      	; 0x412 <lcd_printpattern+0x50>
 lcd_printchar(6);
 40e:	86 e0       	ldi	r24, 0x06	; 6
 410:	91 de       	rcall	.-734    	; 0x134 <lcd_printchar>
}
 412:	df 91       	pop	r29
 414:	cf 91       	pop	r28
 416:	08 95       	ret

00000418 <lcd_animation>:

//lcd Animation
void lcd_animation(int x)
{
 418:	0f 93       	push	r16
 41a:	1f 93       	push	r17
 lcd_printchar(1);
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	8a de       	rcall	.-748    	; 0x134 <lcd_printchar>
 420:	04 ed       	ldi	r16, 0xD4	; 212
 422:	10 e3       	ldi	r17, 0x30	; 48
 424:	c8 01       	movw	r24, r16
 426:	01 97       	sbiw	r24, 0x01	; 1
 428:	f1 f7       	brne	.-4      	; 0x426 <lcd_animation+0xe>
_delay_ms(50);
 lcd_printchar(2);
 42a:	82 e0       	ldi	r24, 0x02	; 2
 42c:	83 de       	rcall	.-762    	; 0x134 <lcd_printchar>
 42e:	c8 01       	movw	r24, r16
 430:	01 97       	sbiw	r24, 0x01	; 1
 432:	f1 f7       	brne	.-4      	; 0x430 <lcd_animation+0x18>
_delay_ms(50);
 lcd_printchar(3);
 434:	83 e0       	ldi	r24, 0x03	; 3
 436:	7e de       	rcall	.-772    	; 0x134 <lcd_printchar>
 438:	1f 91       	pop	r17
 43a:	0f 91       	pop	r16
 43c:	08 95       	ret

0000043e <main>:
#include<avr/io.h>
#include<util/delay.h>
#include<i3indya/lcd.h>

int main()
{
 43e:	df 92       	push	r13
 440:	ef 92       	push	r14
 442:	ff 92       	push	r15
 444:	0f 93       	push	r16
 446:	1f 93       	push	r17
 448:	cf 93       	push	r28
 44a:	df 93       	push	r29
lcd_init('D');
 44c:	84 e4       	ldi	r24, 0x44	; 68
 44e:	82 df       	rcall	.-252    	; 0x354 <lcd_init>
int i;

DDRC = 0xff;
 450:	8f ef       	ldi	r24, 0xFF	; 255
 452:	84 bb       	out	0x14, r24	; 20
 454:	99 e1       	ldi	r25, 0x19	; 25
 456:	e9 2e       	mov	r14, r25
 458:	f1 2c       	mov	r15, r1

lcd_clear();

if(i==15)
{
PORTC = 0b00100000;
 45a:	80 e2       	ldi	r24, 0x20	; 32
 45c:	d8 2e       	mov	r13, r24
 45e:	04 ec       	ldi	r16, 0xC4	; 196
 460:	19 e0       	ldi	r17, 0x09	; 9
 462:	20 c0       	rjmp	.+64     	; 0x4a4 <__stack+0x45>
DDRC = 0xff;

while(i<15)
{

lcd_gotoxy(0,0);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	70 e0       	ldi	r23, 0x00	; 0
 46c:	6d de       	rcall	.-806    	; 0x148 <lcd_gotoxy>
lcd_printstr("TIME LEFT: ");
 46e:	80 e6       	ldi	r24, 0x60	; 96
 470:	90 e0       	ldi	r25, 0x00	; 0
 472:	84 de       	rcall	.-760    	; 0x17c <lcd_printstr>
 474:	80 e1       	ldi	r24, 0x10	; 16
 476:	97 e2       	ldi	r25, 0x27	; 39
 478:	f7 01       	movw	r30, r14
 47a:	31 97       	sbiw	r30, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <__stack+0x1b>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 47e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 480:	d9 f7       	brne	.-10     	; 0x478 <__stack+0x19>

_delay_ms(1000);
lcd_clear();
 482:	d7 de       	rcall	.-594    	; 0x232 <lcd_clear>
 484:	8c 2f       	mov	r24, r28
lcd_printchar(i++);
 486:	21 96       	adiw	r28, 0x01	; 1
 488:	55 de       	rcall	.-854    	; 0x134 <lcd_printchar>

lcd_clear();
 48a:	d3 de       	rcall	.-602    	; 0x232 <lcd_clear>

if(i==15)
 48c:	cf 30       	cpi	r28, 0x0F	; 15
 48e:	d1 05       	cpc	r29, r1
 490:	41 f4       	brne	.+16     	; 0x4a2 <__stack+0x43>
{
PORTC = 0b00100000;
 492:	d5 ba       	out	0x15, r13	; 21
 494:	c8 01       	movw	r24, r16
 496:	01 97       	sbiw	r24, 0x01	; 1
 498:	f1 f7       	brne	.-4      	; 0x496 <__stack+0x37>
_delay_ms(10);
PORTC = 0b00000000;
 49a:	15 ba       	out	0x15, r1	; 21
 49c:	c8 01       	movw	r24, r16
 49e:	01 97       	sbiw	r24, 0x01	; 1
 4a0:	f1 f7       	brne	.-4      	; 0x49e <__stack+0x3f>
_delay_ms(10);
}

lcd_clear();
 4a2:	c7 de       	rcall	.-626    	; 0x232 <lcd_clear>
lcd_init('D');
int i;

DDRC = 0xff;

while(i<15)
 4a4:	cf 30       	cpi	r28, 0x0F	; 15
 4a6:	d1 05       	cpc	r29, r1
 4a8:	ec f2       	brlt	.-70     	; 0x464 <__stack+0x5>
}

lcd_clear();
}
return 0;
}
 4aa:	80 e0       	ldi	r24, 0x00	; 0
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	0f 91       	pop	r16
 4b6:	ff 90       	pop	r15
 4b8:	ef 90       	pop	r14
 4ba:	df 90       	pop	r13
 4bc:	08 95       	ret

000004be <__divmodsi4>:
 4be:	97 fb       	bst	r25, 7
 4c0:	09 2e       	mov	r0, r25
 4c2:	05 26       	eor	r0, r21
 4c4:	0e d0       	rcall	.+28     	; 0x4e2 <__divmodsi4_neg1>
 4c6:	57 fd       	sbrc	r21, 7
 4c8:	04 d0       	rcall	.+8      	; 0x4d2 <__divmodsi4_neg2>
 4ca:	14 d0       	rcall	.+40     	; 0x4f4 <__udivmodsi4>
 4cc:	0a d0       	rcall	.+20     	; 0x4e2 <__divmodsi4_neg1>
 4ce:	00 1c       	adc	r0, r0
 4d0:	38 f4       	brcc	.+14     	; 0x4e0 <__divmodsi4_exit>

000004d2 <__divmodsi4_neg2>:
 4d2:	50 95       	com	r21
 4d4:	40 95       	com	r20
 4d6:	30 95       	com	r19
 4d8:	21 95       	neg	r18
 4da:	3f 4f       	sbci	r19, 0xFF	; 255
 4dc:	4f 4f       	sbci	r20, 0xFF	; 255
 4de:	5f 4f       	sbci	r21, 0xFF	; 255

000004e0 <__divmodsi4_exit>:
 4e0:	08 95       	ret

000004e2 <__divmodsi4_neg1>:
 4e2:	f6 f7       	brtc	.-4      	; 0x4e0 <__divmodsi4_exit>
 4e4:	90 95       	com	r25
 4e6:	80 95       	com	r24
 4e8:	70 95       	com	r23
 4ea:	61 95       	neg	r22
 4ec:	7f 4f       	sbci	r23, 0xFF	; 255
 4ee:	8f 4f       	sbci	r24, 0xFF	; 255
 4f0:	9f 4f       	sbci	r25, 0xFF	; 255
 4f2:	08 95       	ret

000004f4 <__udivmodsi4>:
 4f4:	a1 e2       	ldi	r26, 0x21	; 33
 4f6:	1a 2e       	mov	r1, r26
 4f8:	aa 1b       	sub	r26, r26
 4fa:	bb 1b       	sub	r27, r27
 4fc:	fd 01       	movw	r30, r26
 4fe:	0d c0       	rjmp	.+26     	; 0x51a <__udivmodsi4_ep>

00000500 <__udivmodsi4_loop>:
 500:	aa 1f       	adc	r26, r26
 502:	bb 1f       	adc	r27, r27
 504:	ee 1f       	adc	r30, r30
 506:	ff 1f       	adc	r31, r31
 508:	a2 17       	cp	r26, r18
 50a:	b3 07       	cpc	r27, r19
 50c:	e4 07       	cpc	r30, r20
 50e:	f5 07       	cpc	r31, r21
 510:	20 f0       	brcs	.+8      	; 0x51a <__udivmodsi4_ep>
 512:	a2 1b       	sub	r26, r18
 514:	b3 0b       	sbc	r27, r19
 516:	e4 0b       	sbc	r30, r20
 518:	f5 0b       	sbc	r31, r21

0000051a <__udivmodsi4_ep>:
 51a:	66 1f       	adc	r22, r22
 51c:	77 1f       	adc	r23, r23
 51e:	88 1f       	adc	r24, r24
 520:	99 1f       	adc	r25, r25
 522:	1a 94       	dec	r1
 524:	69 f7       	brne	.-38     	; 0x500 <__udivmodsi4_loop>
 526:	60 95       	com	r22
 528:	70 95       	com	r23
 52a:	80 95       	com	r24
 52c:	90 95       	com	r25
 52e:	9b 01       	movw	r18, r22
 530:	ac 01       	movw	r20, r24
 532:	bd 01       	movw	r22, r26
 534:	cf 01       	movw	r24, r30
 536:	08 95       	ret

00000538 <_exit>:
 538:	f8 94       	cli

0000053a <__stop_program>:
 53a:	ff cf       	rjmp	.-2      	; 0x53a <__stop_program>
