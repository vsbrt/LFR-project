
OM_SAI_FULL_Switch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ea  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000024  00800060  00800060  0000025e  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  0000025e  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000000b4  00000000  00000000  0000027e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000001d8  00000000  00000000  00000332  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000081  00000000  00000000  0000050a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000108  00000000  00000000  0000058b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000040  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000b2  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a4 38       	cpi	r26, 0x84	; 132
  6c:	b1 07       	cpc	r27, r17
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 52 00 	call	0xa4	; 0xa4 <main>
  74:	0c 94 f3 00 	jmp	0x1e6	; 0x1e6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <leftcount>:
int p,q,r,s,x,y,xa,ya,h,part2=0,set=0;
int dp,dq,dx,dy,dxa,dya;

void leftcount(void)
{
   y++;   
  7c:	80 91 74 00 	lds	r24, 0x0074
  80:	90 91 75 00 	lds	r25, 0x0075
  84:	01 96       	adiw	r24, 0x01	; 1
  86:	90 93 75 00 	sts	0x0075, r25
  8a:	80 93 74 00 	sts	0x0074, r24
}
  8e:	08 95       	ret

00000090 <rightcount>:


void rightcount(void)
{
   x++;
  90:	80 91 66 00 	lds	r24, 0x0066
  94:	90 91 67 00 	lds	r25, 0x0067
  98:	01 96       	adiw	r24, 0x01	; 1
  9a:	90 93 67 00 	sts	0x0067, r25
  9e:	80 93 66 00 	sts	0x0066, r24
}
  a2:	08 95       	ret

000000a4 <main>:



int main(void)
{
  a4:	4f 92       	push	r4
  a6:	5f 92       	push	r5
  a8:	6f 92       	push	r6
  aa:	7f 92       	push	r7
  ac:	8f 92       	push	r8
  ae:	9f 92       	push	r9
  b0:	af 92       	push	r10
  b2:	bf 92       	push	r11
  b4:	cf 92       	push	r12
  b6:	df 92       	push	r13
  b8:	ef 92       	push	r14
  ba:	ff 92       	push	r15
  bc:	0f 93       	push	r16
  be:	1f 93       	push	r17
  c0:	cf 93       	push	r28
  c2:	df 93       	push	r29
DDRA = 0x00;
  c4:	1a ba       	out	0x1a, r1	; 26
DDRC = 0xFF;
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	84 bb       	out	0x14, r24	; 20
DDRD = 0xFF;
  ca:	81 bb       	out	0x11, r24	; 17


  while(dxa != xa   &&   dya != ya)
  cc:	40 90 68 00 	lds	r4, 0x0068
  d0:	50 90 69 00 	lds	r5, 0x0069
  d4:	60 90 82 00 	lds	r6, 0x0082
  d8:	70 90 83 00 	lds	r7, 0x0083
   and when whit is detected o/p is '1'
   
2) 10000010 will give the forward motion of motors
*/

		if(part2 == 0)
  dc:	60 91 60 00 	lds	r22, 0x0060
  e0:	70 91 61 00 	lds	r23, 0x0061
  e4:	e0 91 66 00 	lds	r30, 0x0066
  e8:	f0 91 67 00 	lds	r31, 0x0067
  ec:	a0 91 74 00 	lds	r26, 0x0074
  f0:	b0 91 75 00 	lds	r27, 0x0075
  f4:	c0 91 78 00 	lds	r28, 0x0078
  f8:	d0 91 79 00 	lds	r29, 0x0079
  fc:	00 91 62 00 	lds	r16, 0x0062
 100:	10 91 63 00 	lds	r17, 0x0063
 104:	e0 90 64 00 	lds	r14, 0x0064
 108:	f0 90 65 00 	lds	r15, 0x0065
 10c:	c0 90 80 00 	lds	r12, 0x0080
 110:	d0 90 81 00 	lds	r13, 0x0081
 114:	a0 90 6c 00 	lds	r10, 0x006C
 118:	b0 90 6d 00 	lds	r11, 0x006D
 11c:	80 90 76 00 	lds	r8, 0x0076
 120:	90 90 77 00 	lds	r9, 0x0077
 124:	40 91 7e 00 	lds	r20, 0x007E
 128:	50 91 7f 00 	lds	r21, 0x007F
DDRA = 0x00;
DDRC = 0xFF;
DDRD = 0xFF;


  while(dxa != xa   &&   dya != ya)
 12c:	20 91 6a 00 	lds	r18, 0x006A
 130:	30 91 6b 00 	lds	r19, 0x006B
 134:	80 91 7a 00 	lds	r24, 0x007A
 138:	90 91 7b 00 	lds	r25, 0x007B
 13c:	28 17       	cp	r18, r24
 13e:	39 07       	cpc	r19, r25
 140:	c1 f4       	brne	.+48     	; 0x172 <main+0xce>
 142:	1a c0       	rjmp	.+52     	; 0x178 <main+0xd4>
  {
   
     a = PINA & 0b00000111;
 144:	89 b3       	in	r24, 0x19	; 25
 146:	48 2f       	mov	r20, r24
 148:	50 e0       	ldi	r21, 0x00	; 0
 14a:	47 70       	andi	r20, 0x07	; 7
 14c:	50 70       	andi	r21, 0x00	; 0
   and when whit is detected o/p is '1'
   
2) 10000010 will give the forward motion of motors
*/

		if(part2 == 0)
 14e:	61 15       	cp	r22, r1
 150:	71 05       	cpc	r23, r1
 152:	19 f0       	breq	.+6      	; 0x15a <main+0xb6>
 154:	0a c0       	rjmp	.+20     	; 0x16a <main+0xc6>
									 	h++;

									 }
		 

							  		PORTC = 0b10000000;
 156:	25 bb       	out	0x15, r18	; 21
 158:	01 c0       	rjmp	.+2      	; 0x15c <main+0xb8>
 15a:	20 e8       	ldi	r18, 0x80	; 128
			   {
			   		part2++;
			   }


			   a = PINA & 0b00000111;
 15c:	89 b3       	in	r24, 0x19	; 25


				switch(a)
 15e:	90 e0       	ldi	r25, 0x00	; 0
 160:	87 70       	andi	r24, 0x07	; 7
 162:	90 70       	andi	r25, 0x00	; 0
 164:	01 97       	sbiw	r24, 0x01	; 1
 166:	d1 f7       	brne	.-12     	; 0x15c <main+0xb8>
 168:	f6 cf       	rjmp	.-20     	; 0x156 <main+0xb2>
			
			//"********PART II*********"


  
  			if(part2 == 1)
 16a:	61 30       	cpi	r22, 0x01	; 1
 16c:	71 05       	cpc	r23, r1
 16e:	09 f4       	brne	.+2      	; 0x172 <main+0xce>
 170:	ff cf       	rjmp	.-2      	; 0x170 <main+0xcc>
DDRA = 0x00;
DDRC = 0xFF;
DDRD = 0xFF;


  while(dxa != xa   &&   dya != ya)
 172:	46 14       	cp	r4, r6
 174:	57 04       	cpc	r5, r7
 176:	31 f7       	brne	.-52     	; 0x144 <main+0xa0>
 178:	f0 93 67 00 	sts	0x0067, r31
 17c:	e0 93 66 00 	sts	0x0066, r30
 180:	b0 93 75 00 	sts	0x0075, r27
 184:	a0 93 74 00 	sts	0x0074, r26
 188:	d0 93 79 00 	sts	0x0079, r29
 18c:	c0 93 78 00 	sts	0x0078, r28
 190:	10 93 63 00 	sts	0x0063, r17
 194:	00 93 62 00 	sts	0x0062, r16
 198:	f0 92 65 00 	sts	0x0065, r15
 19c:	e0 92 64 00 	sts	0x0064, r14
 1a0:	d0 92 81 00 	sts	0x0081, r13
 1a4:	c0 92 80 00 	sts	0x0080, r12
 1a8:	b0 92 6d 00 	sts	0x006D, r11
 1ac:	a0 92 6c 00 	sts	0x006C, r10
 1b0:	90 92 77 00 	sts	0x0077, r9
 1b4:	80 92 76 00 	sts	0x0076, r8
 1b8:	50 93 7f 00 	sts	0x007F, r21
 1bc:	40 93 7e 00 	sts	0x007E, r20
  
   }

   return 0; 

}
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	df 90       	pop	r13
 1d2:	cf 90       	pop	r12
 1d4:	bf 90       	pop	r11
 1d6:	af 90       	pop	r10
 1d8:	9f 90       	pop	r9
 1da:	8f 90       	pop	r8
 1dc:	7f 90       	pop	r7
 1de:	6f 90       	pop	r6
 1e0:	5f 90       	pop	r5
 1e2:	4f 90       	pop	r4
 1e4:	08 95       	ret

000001e6 <_exit>:
 1e6:	f8 94       	cli

000001e8 <__stop_program>:
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <__stop_program>
